{"version":3,"sources":["components/@vuexy/checkbox/CheckboxesVuexy.js","redux/actions/todo/index.js","views/apps/todo/TodoSidebar.js","views/apps/todo/TodoList.js","views/apps/todo/TaskSidebar.js","views/apps/todo/Todo.js"],"names":["CheckBoxesVuexy","className","this","props","color","type","defaultChecked","checked","value","disabled","onClick","onChange","size","icon","style","labelColor","label","React","Component","getTodos","routeParams","dispatch","a","axios","get","params","then","result","todos","data","catch","err","console","log","completeTask","todo","id","isCompleted","starTask","Promise","all","isStarred","importantTask","isImportant","TodoSidebar","Fragment","mainSidebar","Button","Ripple","block","addTask","options","wheelPropagation","ListGroup","ListGroupItem","action","changeFilter","active","routerProps","location","pathname","connect","filter","history","push","TodoList","state","handleUpdateTask","currentLocation","handleOnChange","e","setState","target","searchTask","match","app","routerFilter","todosArr","length","filteredTodos","renderTodos","map","i","key","stopPropagation","title","tags","tag","trashTask","desc","FormGroup","Input","placeholder","routeParam","todoApp","getState","post","response","val","TaskSidebar","taskToUpdate","taskTitle","taskDesc","taskStatus","taskStarred","taskImportant","newTask","handleNewTaskTags","tagsArr","includes","splice","indexOf","renderTags","taskArr","prevProps","prevState","addTaskState","UncontrolledDropdown","DropdownToggle","DropdownMenu","right","DropdownItem","updateLabel","rows","updateTask","addNewTask","outline","task","mql","window","matchMedia","TODO","sidebarDocked","matches","sidebarOpen","onSetSidebarOpen","open","mediaQueryChanged","handleAddTask","status","undefined","handleUndoChanges","arr","addListener","removeListener","Consumer","context","sidebar","docked","sidebarClassName","touch","contentClassName","pullRight","direction"],"mappings":"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","file":"static/js/44.c3b5bbad.chunk.js","sourcesContent":["import React from 'react'\nclass CheckBoxesVuexy extends React.Component {\n  render() {\n    return (\n      <div\n        className={`vx-checkbox-con ${\n          this.props.className ? this.props.className : ''\n        } vx-checkbox-${this.props.color}`}\n      >\n        <input\n          type=\"checkbox\"\n          defaultChecked={this.props.defaultChecked}\n          checked={this.props.checked}\n          value={this.props.value}\n          disabled={this.props.disabled}\n          onClick={this.props.onClick ? this.props.onClick : null}\n          onChange={this.props.onChange ? this.props.onChange : null}\n        />\n        <span\n          className={`vx-checkbox vx-checkbox-${\n            this.props.size ? this.props.size : 'md'\n          }`}\n        >\n          <span className=\"vx-checkbox--check\">{this.props.icon}</span>\n        </span>\n        <span style={{ color: this.props.labelColor }}>{this.props.label}</span>\n      </div>\n    )\n  }\n}\n\nexport default CheckBoxesVuexy\n","import axios from 'axios'\nimport { history } from '../../../history'\n\nexport const getTodos = (routeParams) => {\n  return async (dispatch) => {\n    await axios\n      .get('api/apps/todo', {\n        params: routeParams\n      })\n      .then((result) => {\n        dispatch({\n          type: 'GET_TODOS',\n          todos: result.data,\n          routeParams\n        })\n      })\n      .catch((err) => console.log(err))\n  }\n}\nexport const completeTask = (todo) => {\n  return (dispatch) => {\n    dispatch({ type: 'COMPLETE_TASK', id: todo.id, value: todo.isCompleted })\n  }\n}\n\nexport const starTask = (todo) => {\n  return (dispatch) => {\n    Promise.all([\n      dispatch({ type: 'STAR_TASK', id: todo.id, value: todo.isStarred })\n    ])\n  }\n}\n\nexport const importantTask = (todo) => {\n  return (dispatch) => {\n    Promise.all([\n      dispatch({ type: 'IMPORTANT_TASK', id: todo.id, value: todo.isImportant })\n    ])\n  }\n}\n\nexport const trashTask = (id) => {\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam\n    axios\n      .post('/api/app/todo/trash-todo', id)\n      .then((response) => dispatch({ type: 'TRASH_TASK', id }))\n      .then(dispatch(getTodos(params)))\n  }\n}\n\nexport const updateTodo = (todo) => {\n  const request = axios.post('/api/apps/todo/update-todo', todo)\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam\n    request.then((response) => {\n      Promise.all([\n        dispatch({\n          type: 'UPDATE_TODO',\n          todos: response.data\n        })\n      ]).then(() => dispatch(getTodos(params)))\n    })\n  }\n}\n\nexport const updateTask = (id, title, desc) => {\n  return (dispatch) => {\n    dispatch({ type: 'UPDATE_TASK', id, title, desc })\n  }\n}\n\nexport const updateLabel = (id, label) => {\n  return (dispatch, getState) => {\n    dispatch({ type: 'UPDATE_LABEL', label, id })\n  }\n}\n\nexport const addNewTask = (task) => {\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam\n    axios.post('/api/apps/todo/new-task', { task }).then((response) => {\n      dispatch({ type: 'ADD_TASK', task })\n      dispatch(getTodos(params))\n    })\n  }\n}\n\nexport const searchTask = (val) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'SEARCH_TASK',\n      val\n    })\n  }\n}\n\nexport const changeFilter = (filter) => {\n  return (dispatch) => {\n    dispatch({ type: 'CHANGE_FILTER', filter })\n    history.push(`/diary/${filter}`)\n    dispatch(getTodos({ filter }))\n  }\n}\n","import React from 'react'\nimport { Button, ListGroup, ListGroupItem } from 'reactstrap'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, Layers, Star, Info, Check, Trash } from 'react-feather'\nimport { connect } from 'react-redux'\nimport { changeFilter } from '../../../redux/actions/todo/index'\nclass TodoSidebar extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <span\n          className=\"sidebar-close-icon\"\n          onClick={() => this.props.mainSidebar(false)}\n        >\n          <X size={15} />\n        </span>\n        <div className=\"todo-app-menu\">\n          <div className=\"add-task\">\n            <Button.Ripple\n              block\n              className=\"btn-block my-1\"\n              color=\"primary\"\n              onClick={() => {\n                this.props.addTask('open')\n                this.props.mainSidebar(false)\n              }}\n            >\n              Add Note\n            </Button.Ripple>\n          </div>\n          <PerfectScrollbar\n            className=\"sidebar-menu-list\"\n            options={{\n              wheelPropagation: false\n            }}\n          >\n            <ListGroup className=\"font-medium-1\">\n              <ListGroupItem\n                className=\"border-0 pt-0\"\n                action\n                onClick={() => {\n                  this.props.changeFilter('all')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/all'\n                    ? true\n                    : false\n                }\n              >\n                <Layers size={22} />\n                <span className=\"align-middle ml-1\">All</span>\n              </ListGroupItem>\n            </ListGroup>\n            <hr />\n            <h5 className=\"mt-2 mb-1 pt-25\">Filters</h5>\n            <ListGroup className=\"font-medium-1\">\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('starred')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/starred'\n                    ? true\n                    : false\n                }\n              >\n                <Star size={22} />\n                <span className=\"align-middle ml-1\">Starred</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('important')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/important'\n                    ? true\n                    : false\n                }\n              >\n                <Info size={22} />\n                <span className=\"align-middle ml-1\">Important</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('completed')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/completed'\n                    ? true\n                    : false\n                }\n              >\n                <Check size={22} />\n                <span className=\"align-middle ml-1\">Completed</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('trashed')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/trashed'\n                    ? true\n                    : false\n                }\n              >\n                <Trash size={22} />\n                <span className=\"align-middle ml-1\">Trashed</span>\n              </ListGroupItem>\n            </ListGroup>\n            <hr />\n            <h5 className=\"mt-2 mb-1 pt-25\">Labels</h5>\n            <ListGroup className=\"font-medium-1\">\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('frontend')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/frontend'\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-primary align-middle\" />\n                <span className=\"align-middle ml-1\">Frontend</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('backend')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/backend'\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-warning align-middle\" />\n                <span className=\"align-middle ml-1\">Backend</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('doc')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/doc'\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-success align-middle\" />\n                <span className=\"align-middle ml-1\">Doc</span>\n              </ListGroupItem>\n              <ListGroupItem\n                className=\"border-0\"\n                onClick={() => {\n                  this.props.changeFilter('bug')\n                }}\n                active={\n                  this.props.routerProps.location.pathname === '/todo/bug'\n                    ? true\n                    : false\n                }\n              >\n                <span className=\"bullet bullet-danger align-middle\" />\n                <span className=\"align-middle ml-1\">Bug</span>\n              </ListGroupItem>\n            </ListGroup>\n          </PerfectScrollbar>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default connect(null, { changeFilter })(TodoSidebar)\n","import React from 'react'\nimport { FormGroup, Input } from 'reactstrap'\nimport { Menu, Search, Check, Info, Star, Trash } from 'react-feather'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { connect } from 'react-redux'\nimport {\n  getTodos,\n  completeTask,\n  starTask,\n  importantTask,\n  trashTask,\n  searchTask\n} from '../../../redux/actions/todo/index'\nimport Checkbox from '../../../components/@vuexy/checkbox/CheckboxesVuexy'\nclass TodoList extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.app.todo.routeParam !== state.currentLocation) {\n      return {\n        todos: props.app.todo.todos\n      }\n    }\n    // Return null if the state hasn't changed\n    return null\n  }\n  state = {\n    todos: [],\n    handleUpdateTask: null,\n    currentLocation: this.props.routerProps.location.pathname,\n    value: ''\n  }\n  async componentDidMount() {\n    await this.props.getTodos(this.props.routerProps.match.params)\n    this.setState({\n      todos: this.props.app.todo.todos,\n      handleUpdateTask: this.props.handleUpdateTask\n    })\n  }\n\n  handleOnChange = (e) => {\n    this.setState({ value: e.target.value })\n    this.props.searchTask(e.target.value)\n  }\n\n  render() {\n    const { todos, handleUpdateTask, value } = this.state\n    let routerFilter = this.props.routerProps.match.params.filter\n    let todosArr = value.length ? this.props.app.todo.filteredTodos : todos\n    let renderTodos =\n      todosArr.length > 0 ? (\n        todosArr.map((todo, i) => {\n          return (\n            <li\n              className={`todo-item ${todo.isCompleted ? 'completed' : ''}`}\n              key={i}\n              onClick={() => {\n                handleUpdateTask(todo)\n              }}\n            >\n              <div className=\"todo-title-wrapper d-flex justify-content-between mb-50\">\n                <div className=\"todo-title-area d-flex align-items-center\">\n                  <div className=\"title-wrapper d-flex\">\n                    <Checkbox\n                      color=\"primary\"\n                      className=\"user-checkbox\"\n                      icon={<Check className=\"vx-icon\" size={12} />}\n                      label={''}\n                      checked={todo.isCompleted}\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        this.props.completeTask(todo)\n                      }}\n                      onChange={(e) => e.stopPropagation()}\n                    />\n                    <h6 className=\"todo-title mt-50 mx-50\">{todo.title}</h6>\n                  </div>\n                  {todo.tags.length > 0 ? (\n                    <div className=\"chip-wrapper\">\n                      {todo.tags.map((tag, i) => (\n                        <div className=\"chip mb-0\" key={i}>\n                          <div className=\"chip-body\">\n                            <span className=\"chip-text\">\n                              <span\n                                className={`bullet bullet-${\n                                  tag === 'backend'\n                                    ? 'warning'\n                                    : tag === 'doc'\n                                    ? 'success'\n                                    : tag === 'bug'\n                                    ? 'danger'\n                                    : 'primary'\n                                } bullet-xs`}\n                              />\n                              <span className=\"text-capitalize ml-25\">\n                                {tag}\n                              </span>\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : null}\n                </div>\n                <div\n                  className={`todo-item-action d-flex ${\n                    routerFilter === 'trashed' ? 'justify-content-end' : ''\n                  }`}\n                >\n                  <div\n                    className={`todo-item-info d-inline-block ${\n                      routerFilter === 'trashed' ? 'mr-1' : 'mr-1 mr-sm-0'\n                    }`}\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      this.props.importantTask(todo)\n                    }}\n                  >\n                    <Info\n                      size={17}\n                      className={`${todo.isImportant ? 'text-success' : ''}`}\n                    />\n                  </div>\n                  <div\n                    className=\"todo-item-favorite d-inline-block mr-1 mr-sm-0\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      this.props.starTask(todo)\n                    }}\n                  >\n                    <Star\n                      size={17}\n                      className={`${todo.isStarred ? 'text-warning' : ''}`}\n                    />\n                  </div>\n                  {routerFilter !== 'trashed' ? (\n                    <div\n                      className=\"todo-item-delete d-inline-block mr-1 mr-sm-0\"\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        this.props.trashTask(todo.id)\n                      }}\n                    >\n                      <Trash size={17} />\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n              {todo.desc.length > 0 ? (\n                <p className=\"todo-desc truncate mb-0\">{todo.desc}</p>\n              ) : (\n                ''\n              )}\n            </li>\n          )\n        })\n      ) : (\n        <p className=\"p-1 text-center mt-2 font-medium-3 text-bold-500\">\n          No tasks at this time\n        </p>\n      )\n\n    return (\n      <div className=\"content-right\">\n        <div className=\"todo-app-area\">\n          <div className=\"todo-app-list-wrapper\">\n            <div className=\"todo-app-list\">\n              <div className=\"app-fixed-search\">\n                <div\n                  className=\"sidebar-toggle d-inline-block d-lg-none\"\n                  onClick={() => this.props.mainSidebar(true)}\n                >\n                  <Menu size={24} />\n                </div>\n                <FormGroup className=\"position-relative has-icon-left m-0 d-inline-block d-lg-block\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    onChange={(e) => this.handleOnChange(e)}\n                    value={value}\n                  />\n                  <div className=\"form-control-position\">\n                    <Search size={15} />\n                  </div>\n                </FormGroup>\n              </div>\n              <PerfectScrollbar\n                className=\"todo-task-list\"\n                options={{\n                  wheelPropagation: false\n                }}\n              >\n                <ul className=\"todo-task-list-wrapper\">{renderTodos}</ul>\n              </PerfectScrollbar>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    app: state.todoApp\n  }\n}\nexport default connect(mapStateToProps, {\n  getTodos,\n  completeTask,\n  starTask,\n  importantTask,\n  trashTask,\n  searchTask\n})(TodoList)\n","import React from 'react'\nimport {\n  Input,\n  Button,\n  FormGroup,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from 'reactstrap'\nimport { X, Info, Star, Tag, Check } from 'react-feather'\nimport Checkbox from '../../../components/@vuexy/checkbox/CheckboxesVuexy'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { connect } from 'react-redux'\nimport {\n  starTask,\n  completeTask,\n  importantTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n} from '../../../redux/actions/todo/index'\nclass TaskSidebar extends React.Component {\n  // static getDerivedStateFromProps (props, state){\n  //   if (\n  //    ( props.taskToUpdate !== null &&\n  //     props.taskToUpdate.title !== state.taskTitle) ||\n  //     (props.taskToUpdate !== null && props.taskToUpdate.isCompleted !== state.newTask.isCompleted)\n  //   ) {\n  //     let todosArr = props.app.todo.todos\n  //     let receivedTask =\n  //       props.taskToUpdate !== null ? props.taskToUpdate : 1\n  //     let filteredTask = todosArr.filter(i => i.id === receivedTask.id)\n  //     let taskToUpdate, taskTitle, taskDesc\n  //     filteredTask.map(task => {\n  //       return (\n  //         (taskToUpdate = task),\n  //         (taskTitle = task.title),\n  //         (taskDesc = task.desc)\n  //       )\n  //     })\n  //     return {\n  //       taskToUpdate,\n  //       taskTitle,\n  //       taskDesc\n  //     }\n  //   }\n  //   return null\n  // }\n\n  state = {\n    taskToUpdate: null,\n    taskTitle: '',\n    taskDesc: '',\n    taskStatus: false,\n    taskStarred: false,\n    taskImportant: false,\n    newTask: {\n      title: '',\n      desc: '',\n      tags: [],\n      isCompleted: false,\n      isImportant: false,\n      isStarred: false\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      (this.props.taskToUpdate !== null &&\n        this.state.taskToUpdate !== this.props.taskToUpdate) ||\n      (this.props.taskToUpdate !== null &&\n        this.state.taskStatus !== this.props.taskToUpdate.isCompleted) ||\n      (this.props.taskToUpdate !== null &&\n        this.state.taskStarred !== this.props.taskToUpdate.isStarred) ||\n      (this.props.taskToUpdate !== null &&\n        this.state.taskImportant !== this.props.taskToUpdate.isImportant)\n    ) {\n      this.setState({\n        taskToUpdate: this.props.taskToUpdate,\n        taskTitle: this.props.taskToUpdate.title,\n        taskDesc: this.props.taskToUpdate.desc,\n        taskStatus: this.props.taskToUpdate.isCompleted,\n        taskStarred: this.props.taskToUpdate.isStarred,\n        taskImportant: this.props.taskToUpdate.isImportant\n      })\n    } else {\n      return\n    }\n  }\n\n  handleNewTaskTags = (tag) => {\n    let tagsArr = this.state.newTask.tags\n    if (tagsArr.includes(tag)) {\n      tagsArr.splice(tagsArr.indexOf(tag), 1)\n    } else {\n      tagsArr.push(tag)\n    }\n    this.setState({\n      ...this.state.newTask,\n      tags: tag\n    })\n  }\n\n  renderTags = (taskArr) => {\n    return taskArr.map((tag, i) => (\n      <div className=\"chip mb-0 mr-50\" key={i}>\n        <div className=\"chip-body\">\n          <span className=\"chip-text\">\n            <span\n              className={`bullet bullet-${\n                tag === 'backend'\n                  ? 'warning'\n                  : tag === 'doc'\n                  ? 'success'\n                  : tag === 'bug'\n                  ? 'danger'\n                  : 'primary'\n              } bullet-xs`}\n            />\n            <span className=\"text-capitalize ml-25\">{tag}</span>\n          </span>\n        </div>\n      </div>\n    ))\n  }\n\n  render() {\n    const { taskToUpdate, taskTitle, taskDesc, newTask, taskStatus } =\n      this.state\n\n    return (\n      <div\n        className={`task-sidebar ${\n          this.props.addTaskState === true ? 'show' : ''\n        }`}\n      >\n        <div className=\"task-header\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"task-type-title text-bold-600\">\n              <h3>\n                {this.props.taskToUpdate && this.props.taskToUpdate.id\n                  ? 'Update Note'\n                  : 'Add Note'}\n              </h3>\n            </div>\n            <div className=\"close-icon\">\n              <X\n                className=\"cursor-pointer\"\n                size={20}\n                onClick={() => this.props.addTask('close')}\n              />\n            </div>\n          </div>\n        </div>\n        <PerfectScrollbar>\n          <div className=\"task-body\">\n            <div className=\"d-flex justify-content-between mb-2\">\n              <div className=\"mark-complete\">\n                {this.props.taskToUpdate && this.props.taskToUpdate.id && (\n                  <Checkbox\n                    color=\"primary\"\n                    className=\"user-checkbox\"\n                    icon={<Check className=\"vx-icon\" size={15} />}\n                    label={''}\n                    checked={taskStatus}\n                    onChange={(e) => {\n                      this.props.completeTask(this.props.taskToUpdate)\n                    }}\n                  />\n                )}\n              </div>\n              <div className=\"task-actions\">\n                <Info\n                  size={20}\n                  className={`mr-50 ${\n                    (this.props.taskToUpdate !== null &&\n                      this.state.taskImportant) ||\n                    newTask.isImportant\n                      ? 'text-success'\n                      : ''\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null) {\n                      this.props.importantTask(this.props.taskToUpdate)\n                    } else {\n                      this.setState({\n                        newTask: {\n                          ...this.state.newTask,\n                          isImportant: !this.state.newTask.isImportant\n                        }\n                      })\n                    }\n                  }}\n                />\n                <Star\n                  size={20}\n                  className={`mr-50 ${\n                    (this.props.taskToUpdate !== null &&\n                      this.state.taskStarred) ||\n                    newTask.isStarred\n                      ? 'text-warning'\n                      : ''\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null) {\n                      this.props.starTask(this.props.taskToUpdate)\n                    } else {\n                      this.setState({\n                        newTask: {\n                          ...this.state.newTask,\n                          isStarred: !this.state.newTask.isStarred\n                        }\n                      })\n                    }\n                  }}\n                />\n                <UncontrolledDropdown className=\"d-inline-block\">\n                  <DropdownToggle tag=\"span\">\n                    <Tag className=\"mr-50\" size={20} />\n                  </DropdownToggle>\n                  <DropdownMenu tag=\"ul\" right>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={'Frontend'}\n                        checked={\n                          (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\n                              'frontend'\n                            )) ||\n                          newTask.tags.includes('frontend')\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onChange={(e) => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, 'frontend')\n                          else this.handleNewTaskTags('frontend')\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={'Backend'}\n                        checked={\n                          (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes('backend')) ||\n                          newTask.tags.includes('backend')\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={(e) => e.stopPropagation()}\n                        onChange={(e) => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, 'backend')\n                          else this.handleNewTaskTags('backend')\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={'Doc'}\n                        checked={\n                          (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes('doc')) ||\n                          newTask.tags.includes('doc')\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={(e) => e.stopPropagation()}\n                        onChange={(e) => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, 'doc')\n                          else this.handleNewTaskTags('doc')\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={'Bug'}\n                        checked={\n                          (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes('bug')) ||\n                          newTask.tags.includes('bug')\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={(e) => e.stopPropagation()}\n                        onChange={(e) => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, 'bug')\n                          else this.handleNewTaskTags('bug')\n                        }}\n                      />\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div>\n            </div>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"Title\"\n                value={\n                  this.props.taskToUpdate !== null ? taskTitle : newTask.title\n                }\n                onChange={(e) => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.setState({\n                      taskTitle: e.target.value\n                    })\n                  } else {\n                    this.setState({\n                      newTask: {\n                        ...this.state.newTask,\n                        title: e.target.value\n                      }\n                    })\n                  }\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                placeholder=\"Description\"\n                rows=\"5\"\n                value={\n                  this.props.taskToUpdate !== null ? taskDesc : newTask.desc\n                }\n                onChange={(e) => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.setState({\n                      taskDesc: e.target.value\n                    })\n                  } else {\n                    this.setState({\n                      newTask: {\n                        ...this.state.newTask,\n                        desc: e.target.value\n                      }\n                    })\n                  }\n                }}\n              />\n            </FormGroup>\n            <div className=\"chip-wrapper my-1 d-flex flex-wrap\">\n              {this.props.taskToUpdate !== null &&\n              this.props.taskToUpdate.tags &&\n              this.props.taskToUpdate.tags.length > 0\n                ? this.renderTags(this.props.taskToUpdate.tags)\n                : null}\n            </div>\n\n            <hr className=\"my-2\" />\n            <div className=\"d-flex justify-content-end\">\n              <Button.Ripple\n                className=\"mr-50\"\n                color=\"primary\"\n                onClick={() => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.props.updateTask(taskToUpdate.id, taskTitle, taskDesc)\n                  } else {\n                    this.props.addNewTask(this.state.newTask)\n                  }\n                  this.props.addTask('close')\n                  this.setState({\n                    newTask: {\n                      title: '',\n                      desc: '',\n                      tags: [],\n                      isCompleted: false,\n                      isImportant: false,\n                      isStarred: false\n                    }\n                  })\n                }}\n                disabled={\n                  taskTitle.length > 0 || newTask.title.length > 0\n                    ? false\n                    : true\n                }\n              >\n                {taskToUpdate &&\n                taskToUpdate.id &&\n                this.props.taskToUpdate !== null\n                  ? 'Update'\n                  : 'Add'}\n              </Button.Ripple>\n              <Button.Ripple\n                color=\"light\"\n                outline\n                onClick={() => {\n                  this.props.addTask('close')\n                  this.setState({\n                    newTask: {\n                      title: '',\n                      desc: '',\n                      tags: [],\n                      isCompleted: false,\n                      isImportant: false,\n                      isStarred: false\n                    }\n                  })\n                }}\n              >\n                Cancel\n              </Button.Ripple>\n            </div>\n          </div>\n        </PerfectScrollbar>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    app: state.todoApp\n  }\n}\n\nexport default connect(mapStateToProps, {\n  completeTask,\n  importantTask,\n  starTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n})(TaskSidebar)\n","import React from 'react'\nimport Sidebar from 'react-sidebar'\nimport { ContextLayout } from '../../../utility/context/Layout'\nimport TodoSidebar from './TodoSidebar'\nimport TodoList from './TodoList'\nimport TaskSidebar from './TaskSidebar'\nimport '../../../assets/scss/pages/app-todo.scss'\nconst mql = window.matchMedia(`(min-width: 992px)`)\n\nclass TODO extends React.Component {\n  state = {\n    addTask: false,\n    sidebarDocked: mql.matches,\n    sidebarOpen: false,\n    taskToUpdate: null,\n    prevState: null\n  }\n  UNSAFE_componentWillMount() {\n    mql.addListener(this.mediaQueryChanged)\n  }\n\n  componentWillUnmount() {\n    mql.removeListener(this.mediaQueryChanged)\n  }\n\n  onSetSidebarOpen = (open) => {\n    this.setState({ sidebarOpen: open })\n  }\n\n  mediaQueryChanged = () => {\n    this.setState({ sidebarDocked: mql.matches, sidebarOpen: false })\n  }\n\n  handleAddTask = (status) => {\n    status === 'open'\n      ? this.setState({ addTask: true })\n      : this.setState({ addTask: false, taskToUpdate: null })\n  }\n  handleUpdateTask = (todo) => {\n    if (todo !== undefined) {\n      this.setState({ addTask: true, taskToUpdate: todo })\n    } else {\n      this.setState({ taskToUpdate: null })\n    }\n  }\n\n  handleUndoChanges = (arr) => {\n    this.setState({\n      prevState: arr\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"todo-application position-relative\">\n        <div\n          className={`app-content-overlay ${\n            this.state.addTask || this.state.sidebarOpen ? 'show' : ''\n          }`}\n          onClick={() => {\n            this.handleAddTask('close')\n            this.onSetSidebarOpen(false)\n          }}\n        />\n        <ContextLayout.Consumer>\n          {(context) => (\n            <Sidebar\n              sidebar={\n                <TodoSidebar\n                  routerProps={this.props}\n                  addTask={this.handleAddTask}\n                  mainSidebar={this.onSetSidebarOpen}\n                />\n              }\n              docked={this.state.sidebarDocked}\n              open={this.state.sidebarOpen}\n              sidebarClassName=\"sidebar-content todo-sidebar d-flex\"\n              touch={false}\n              contentClassName=\"sidebar-children d-none\"\n              pullRight={context.state.direction === 'rtl'}\n            >\n              \"\"\n            </Sidebar>\n          )}\n        </ContextLayout.Consumer>\n        <TodoList\n          routerProps={this.props}\n          handleUpdateTask={this.handleUpdateTask}\n          mainSidebar={this.onSetSidebarOpen}\n          prevState={this.state.prevState}\n        />\n        <TaskSidebar\n          addTask={this.handleAddTask}\n          addTaskState={this.state.addTask}\n          taskToUpdate={this.state.taskToUpdate}\n          newTask={this.state.newTask}\n          mainSidebar={this.onSetSidebarOpen}\n          handleUndoChanges={this.handleUndoChanges}\n        />\n      </div>\n    )\n  }\n}\n\nexport default TODO\n"],"sourceRoot":""}