{"version":3,"sources":["redux/actions/diary/index.js","views/Diary/DiarySidebar.js","views/Diary/DiaryList.js","views/Diary/TaskSidebar.js","views/Diary/Diary.js"],"names":["axios","defaults","baseURL","getTodos","routeParams","JSON","parse","localStorage","getItem","userData","dispatch","a","get","_id","params","headers","Authorization","then","response","type","todos","data","catch","err","console","log","completeTask","todo","id","value","isCompleted","starTask","Promise","all","isStarred","importantTask","isImportant","connect","changeFilter","filter","history","push","props","Fragment","className","onClick","mainSidebar","size","Button","Ripple","block","color","addTask","options","wheelPropagation","ListGroup","ListGroupItem","action","active","routerProps","location","pathname","DiaryList","state","open","handleUpdateTask","currentLocation","getdiaryLIst","setState","app","handleOnChange","e","target","searchTask","this","prevState","clearPrevState","routerFilter","match","todosArr","length","filteredTodos","undefined","renderTodos","map","i","today","Date","createdAt","style","border","padding","margin","key","Modal","isOpen","backdrop","ModalBody","ModalFooter","trashTask","Card","minHeight","CardBody","fontSize","toLocaleDateString","weekday","year","month","day","fontWeight","title","desc","wordBreak","whiteSpace","maxHeight","backgroundColor","borderTopRightRadius","stopPropagation","FormGroup","display","justifyContent","borderRadius","Input","width","placeholder","onChange","routeParam","React","Component","todoApp","getState","post","val","colourOptions1","label","isFixed","TaskSidebar","audioDetails","url","blob","chunks","duration","h","m","s","ptype","taskToUpdate","taskTitle","taskDesc","taskStatus","taskStarred","taskImportant","newTask","tags","handleAudioStop","handleAudioUpload","file","handleRest","handleNewTaskTags","tag","tagsArr","includes","splice","indexOf","renderTags","taskArr","prevProps","addTaskState","icon","checked","UncontrolledDropdown","DropdownToggle","DropdownMenu","right","DropdownItem","updateLabel","labelColor","classNamePrefix","ref","selectAssetRef","name","isClearable","onRecordingComplete","videoBlob","record","audioURL","showUIAudio","rows","textAlign","outline","handleUndoChanges","updateTask","addNewTask","disabled","ans","request","task","user","toast","success","mql","window","matchMedia","Diary","useState","setaddTask","sidebarOpen","setsidebarOpen","settaskToUpdate","setprevState","onSetSidebarOpen","handleAddTask","status","Consumer","context","sidebar","docked","matches","sidebarClassName","touch","contentClassName","pullRight","direction"],"mappings":"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","file":"static/js/27.6f80f31e.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { history } from '../../../history'\r\nimport { toast } from 'react-toastify'\r\naxios.defaults.baseURL = 'https://lastarzi2.herokuapp.com'\r\n//axios.defaults.baseURL = \"http://localhost:5000\";\r\n\r\nexport const getTodos = (routeParams) => {\r\n  const logInUserData = JSON.parse(localStorage.getItem('logInUserData'))\r\n  if (!logInUserData) return\r\n  let userData = localStorage.getItem('logInUserData')\r\n    ? JSON.parse(localStorage.getItem('logInUserData'))\r\n    : {}\r\n  return async (dispatch) => {\r\n    await axios\r\n      .get(`backendapi/diary/list?user=${userData._id}`, {\r\n        params: routeParams,\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('authtoken')\r\n        }\r\n      })\r\n      .then((response) => {\r\n        // for (let data of response?.data) {\r\n        //   data.nomineeId = data?.nomineeId && decryptdata(data.nomineeId, true)\r\n        //   // data._id = data?._id && decryptdata(data._id,true)\r\n        //   // data.userId = data?.userId && decryptdata(data.userId,true)\r\n        //   data.name = data?.name && decryptdata(data.name, true)\r\n        //   data.relation = data?.relation && decryptdata(data.relation, true)\r\n        //   data.email = data?.email && decryptdata(data.email, true)\r\n        //   data.primaryContact =\r\n        //     data?.primaryContact && decryptdata(data.primaryContact, true)\r\n        //   data.secondaryContact =\r\n        //     data?.secondaryContact && decryptdata(data.secondaryContact, true)\r\n        //   data.address = data?.address && decryptdata(data.address, true)\r\n        // }\r\n        dispatch({\r\n          type: 'GET_TODOS',\r\n          todos: response.data,\r\n          routeParams\r\n        })\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n}\r\nexport const completeTask = (todo) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: 'COMPLETE_TASK', id: todo.id, value: todo.isCompleted })\r\n  }\r\n}\r\n\r\nexport const starTask = (todo) => {\r\n  return (dispatch) => {\r\n    Promise.all([\r\n      dispatch({ type: 'STAR_TASK', id: todo.id, value: todo.isStarred })\r\n    ])\r\n  }\r\n}\r\n\r\nexport const importantTask = (todo) => {\r\n  return (dispatch) => {\r\n    Promise.all([\r\n      dispatch({ type: 'IMPORTANT_TASK', id: todo.id, value: todo.isImportant })\r\n    ])\r\n  }\r\n}\r\n\r\nexport const trashTask = (id) => {\r\n  return (dispatch, getState) => {\r\n    const params = getState().todoApp.todo.routeParam\r\n    axios\r\n      .post('/api/app/todo/trash-todo', id, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('authtoken')\r\n        }\r\n      })\r\n      .then((response) => dispatch({ type: 'TRASH_TASK', id }))\r\n      .then(dispatch(getTodos(params)))\r\n  }\r\n}\r\n\r\nexport const updateTodo = (todo) => {\r\n  console.log('updateTodo todo')\r\n  const request = axios.post('/api/apps/todo/update-todo', todo, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + localStorage.getItem('authtoken')\r\n    }\r\n  })\r\n  return (dispatch, getState) => {\r\n    const params = getState().todoApp.todo.routeParam\r\n    request.then((response) => {\r\n      Promise.all([\r\n        dispatch({\r\n          type: 'UPDATE_TODO',\r\n          todos: response.data\r\n        })\r\n      ]).then(() => dispatch(getTodos(params)))\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateTask = (\r\n  id,\r\n  title,\r\n  desc,\r\n  taskToUpdate,\r\n  isCompleted,\r\n  isImportant,\r\n  isStarred,\r\n  tags\r\n) => {\r\n  const ans = {\r\n    _id: id,\r\n    title,\r\n    desc,\r\n    taskToUpdate,\r\n    isCompleted,\r\n    isImportant,\r\n    isStarred,\r\n    tags\r\n  }\r\n  const request = axios.post('/backendapi/diary/update', ans, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + localStorage.getItem('authtoken')\r\n    }\r\n  })\r\n  return (dispatch, getState) => {\r\n    const params = getState().todoApp.todo.routeParam\r\n    request.then((response) => {\r\n      Promise.all([\r\n        dispatch({\r\n          type: 'UPDATE_TASK',\r\n          ans\r\n          // todos: response.data\r\n        })\r\n      ]).then(() => dispatch(getTodos(params)))\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateLabel = (id, label) => {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: 'UPDATE_LABEL', label, id })\r\n  }\r\n}\r\n\r\nexport const addNewTask = (task) => {\r\n  return (dispatch, getState) => {\r\n    const params = getState().todoApp.todo.routeParam\r\n    const user = JSON.parse(localStorage.getItem('logInUserData'))._id\r\n    task.user = user\r\n    axios\r\n      .post('/backendapi/diary/add', task, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('authtoken')\r\n        }\r\n      })\r\n      .then((response) => {\r\n        dispatch({ type: 'ADD_TASK', task })\r\n        dispatch(getTodos(params))\r\n        toast.success('Note Added Successfully!!')\r\n      })\r\n  }\r\n}\r\n\r\nexport const searchTask = (val) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: 'SEARCH_TASK',\r\n      val\r\n    })\r\n  }\r\n}\r\n\r\nexport const changeFilter = (filter) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: 'CHANGE_FILTER', filter })\r\n    history.push(`/#/diary/${filter}`)\r\n    dispatch(getTodos({ filter }))\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Button, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { X, Layers, Star, Bookmark, Check, Trash } from 'react-feather'\r\nimport { connect } from 'react-redux'\r\nimport { changeFilter } from '../../redux/actions/diary/index'\r\nconst DiarySidebar = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <span\r\n        className=\"sidebar-close-icon\"\r\n        onClick={() => props.mainSidebar(false)}\r\n      >\r\n        <X size={15} />\r\n      </span>\r\n      <div className=\"todo-app-menu\">\r\n        <div className=\"add-task\">\r\n          <Button.Ripple\r\n            block\r\n            className=\"btn-block\"\r\n            color=\"warning\"\r\n            onClick={() => {\r\n              props.addTask('open')\r\n              props.mainSidebar(false)\r\n            }}\r\n          >\r\n            Add Notes\r\n          </Button.Ripple>\r\n        </div>\r\n        <PerfectScrollbar\r\n          className=\"sidebar-menu-list\"\r\n          options={{\r\n            wheelPropagation: false\r\n          }}\r\n        >\r\n          <ListGroup className=\"font-medium-1\">\r\n            <ListGroupItem\r\n              className=\"border-0 pt-0\"\r\n              action\r\n              onClick={() => {\r\n                props.changeFilter('all')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary' ? true : false\r\n              }\r\n            >\r\n              <Layers size={22} />\r\n              <span className=\"align-middle ml-1\">All</span>\r\n            </ListGroupItem>\r\n          </ListGroup>\r\n          <hr />\r\n          <h5 className=\"mt-2 mb-1 pt-25\">Filters</h5>\r\n          <ListGroup className=\"font-medium-1\">\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('important')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/important'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <Star size={22} />\r\n              <span className=\"align-middle ml-1\">Important</span>\r\n            </ListGroupItem>\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('starred')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/starred'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <Bookmark size={22} />\r\n              <span className=\"align-middle ml-1\">Bookmark</span>\r\n            </ListGroupItem>\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('completed')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/completed'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <Check size={22} />\r\n              <span className=\"align-middle ml-1\">Completed</span>\r\n            </ListGroupItem>\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('trashed')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/trashed'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <Trash size={22} />\r\n              <span className=\"align-middle ml-1\">Trashed</span>\r\n            </ListGroupItem>\r\n          </ListGroup>\r\n          <hr />\r\n          <h5 className=\"mt-2 mb-1 pt-25\">Labels</h5>\r\n          <ListGroup className=\"font-medium-1\">\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('personal')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/personal'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <span className=\"bullet bullet-primary align-middle\" />\r\n              <span className=\"align-middle ml-1\">Personal</span>\r\n            </ListGroupItem>\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('professional')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/professional'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <span className=\"bullet bullet-warning align-middle\" />\r\n              <span className=\"align-middle ml-1\">Professional</span>\r\n            </ListGroupItem>\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('others')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/others'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <span className=\"bullet bullet-success align-middle\" />\r\n              <span className=\"align-middle ml-1\">Others</span>\r\n            </ListGroupItem>\r\n            <ListGroupItem\r\n              className=\"border-0\"\r\n              onClick={() => {\r\n                props.changeFilter('todo')\r\n              }}\r\n              active={\r\n                props.routerProps.location.pathname === '/diary/todo'\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <span className=\"bullet bullet-danger align-middle\" />\r\n              <span className=\"align-middle ml-1\">TO DO List</span>\r\n            </ListGroupItem>\r\n          </ListGroup>\r\n        </PerfectScrollbar>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default connect(null, { changeFilter })(DiarySidebar)\r\n","import React from 'react'\r\nimport {\r\n  FormGroup,\r\n  Input,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Modal,\r\n  CardBody,\r\n  Card\r\n} from 'reactstrap'\r\nimport { Menu, Search, Bookmark, Star, Trash } from 'react-feather'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  getTodos,\r\n  completeTask,\r\n  starTask,\r\n  importantTask,\r\n  trashTask,\r\n  searchTask\r\n} from '../../redux/actions/diary/index'\r\nclass DiaryList extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.app.todo.routeParam !== state.currentLocation) {\r\n      return {\r\n        todos: props.app.todo.todos\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  state = {\r\n    open: false,\r\n    id: null,\r\n    todos: [],\r\n    handleUpdateTask: null,\r\n    currentLocation: this.props?.routerProps?.location?.pathname,\r\n    value: ''\r\n  }\r\n  getdiaryLIst = async () => {\r\n    if (!this.state.currentLocation) return\r\n    await this.props.getTodos(this.state.currentLocation)\r\n    this.setState({\r\n      todos: this.props?.app?.todo?.todos,\r\n      handleUpdateTask: this.props.handleUpdateTask\r\n    })\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    if (this.props.prevState) {\r\n      this.setState({ todos: props.app.todo.todos })\r\n      this.props.clearPrevState()\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.getdiaryLIst()\r\n  }\r\n\r\n  handleOnChange = (e) => {\r\n    this.setState({ value: e.target.value })\r\n    this.props.searchTask(e.target.value)\r\n  }\r\n\r\n  render() {\r\n    const { todos, handleUpdateTask, value } = this.state\r\n    let routerFilter = this.props.routerProps.match.params.filter\r\n    let todosArr = value.length ? this.props.app.todo.filteredTodos : todos\r\n\r\n    if (todosArr === undefined) {\r\n      return (\r\n        <div className=\"fallback-spinner vh-100\">\r\n          <div className=\"loading\">\r\n            <div className=\"effect-1 effects\"></div>\r\n            <div className=\"effect-2 effects\"></div>\r\n            <div className=\"effect-3 effects\"></div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    console.log(todosArr)\r\n    let renderTodos =\r\n      todosArr.length > 0 ? (\r\n        todosArr.map((todo, i) => {\r\n          var options = {\r\n            weekday: 'long',\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric'\r\n          }\r\n          var today = new Date(todo.createdAt)\r\n          return (\r\n            <li\r\n              style={{ border: 'none', padding: '0', margin: '0 1.6rem' }}\r\n              className={`todo-item ${todo.isCompleted ? 'completed' : ''}`}\r\n              key={i}\r\n              onClick={() => {\r\n                handleUpdateTask(todo)\r\n              }}\r\n            >\r\n              <Modal\r\n                isOpen={this.state.open}\r\n                className=\"modal-dialog-centered\"\r\n                backdrop=\"static\"\r\n              >\r\n                <ModalBody>\r\n                  Are you sure you want to delete this record?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    className=\"button-label\"\r\n                    onClick={() => {\r\n                      this.setState({ open: false })\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => {\r\n                      this.setState({ open: false })\r\n                      this.props.trashTask(this.state.id)\r\n                    }}\r\n                    className=\"button-label\"\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n              <Card className=\"mt-1 mb-0\" style={{ minHeight: '110px' }}>\r\n                <CardBody className=\"p-0 d-flex\">\r\n                  <div id=\"left-content\" className=\"w-100 p-1\">\r\n                    <div id=\"top-content\" className=\"d-flex\">\r\n                      <p style={{ fontSize: '1rem' }}>\r\n                        {today.toLocaleDateString('en-US', options)}&nbsp;\r\n                        {'-'}\r\n                      </p>\r\n                      <p style={{ fontSize: '1.15rem', fontWeight: 'bold' }}>\r\n                        &nbsp;\r\n                        {todo.title}\r\n                      </p>\r\n                    </div>\r\n                    <div id=\"bottom-content\">\r\n                      {todo.desc.length > 0 ? (\r\n                        <p\r\n                          className=\"todo-desc mb-0\"\r\n                          style={{\r\n                            wordBreak: 'break-all',\r\n                            whiteSpace: 'normal',\r\n                            fontSize: '1.15rem'\r\n                          }}\r\n                        >\r\n                          {todo.desc}\r\n                        </p>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div id=\"options\">\r\n                    <div\r\n                      style={{ maxHeight: '110px' }}\r\n                      className=\"d-flex flex-column justify-content-between\"\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          padding: '0.5rem',\r\n                          backgroundColor: todo.isImportant\r\n                            ? 'var(--danger)'\r\n                            : '',\r\n                          borderTopRightRadius: '0.5rem'\r\n                        }}\r\n                        onClick={(e) => {\r\n                          e.stopPropagation()\r\n                          this.props.importantTask(todo)\r\n                        }}\r\n                      >\r\n                        <Star\r\n                          size={23}\r\n                          color={`${\r\n                            todo.isImportant ? 'white' : 'currentColor'\r\n                          }`}\r\n                          // className={`${todo.isImportant ? 'text-danger' : ''}`}\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          padding: '0.5rem',\r\n                          backgroundColor: todo.isStarred\r\n                            ? 'var(--warning)'\r\n                            : ''\r\n                        }}\r\n                        onClick={(e) => {\r\n                          e.stopPropagation()\r\n                          this.props.starTask(todo)\r\n                        }}\r\n                      >\r\n                        <Bookmark\r\n                          size={23}\r\n                          color={`${todo.isStarred ? 'white' : 'currentColor'}`}\r\n                        />\r\n                      </div>\r\n                      {routerFilter !== 'trashed' ? (\r\n                        <div\r\n                          style={{ padding: '0.5rem' }}\r\n                          // onClick={(e) => {\r\n                          //   //e.stopPropagation()\r\n                          //   this.openModal(todo.id)\r\n                          // }}\r\n                        >\r\n                          <Trash\r\n                            size={23}\r\n                            onClick={(e) => {\r\n                              e.stopPropagation()\r\n                              this.setState({ id: todo.id, open: true })\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                  {/* <div className=\"todo-title-wrapper d-flex justify-content-between mb-50\">\r\n                    <div className=\"todo-title-area d-flex align-items-center\">\r\n                      <div className=\"title-wrapper d-flex\"></div>\r\n\r\n                      {todo.tags.length > 0 ? (\r\n                        <div className=\"chip-wrapper\">\r\n                          {todo.tags.map((tag, i) => (\r\n                            <div className=\"chip mb-0\" key={i}>\r\n                              <div className=\"chip-body\">\r\n                                <span className=\"chip-text\">\r\n                                  <span\r\n                                    className={`bullet bullet-${\r\n                                      tag === 'backend'\r\n                                        ? 'warning'\r\n                                        : tag === 'doc'\r\n                                        ? 'success'\r\n                                        : tag === 'bug'\r\n                                        ? 'danger'\r\n                                        : 'primary'\r\n                                    } bullet-xs`}\r\n                                  />\r\n                                  <span className=\"text-capitalize ml-25\">\r\n                                    {tag}\r\n                                  </span>\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                    <div\r\n                      className={`todo-item-action d-flex ${\r\n                        routerFilter === 'trashed' ? 'justify-content-end' : ''\r\n                      }`}\r\n                    >\r\n                      <div\r\n                        className={`todo-item-info d-inline-block ${\r\n                          routerFilter === 'trashed' ? 'mr-1' : 'mr-1 mr-sm-0'\r\n                        }`}\r\n                        onClick={(e) => {\r\n                          e.stopPropagation()\r\n                          this.props.importantTask(todo)\r\n                        }}\r\n                      >\r\n                        <Star\r\n                          size={17}\r\n                          className={`${todo.isImportant ? 'text-danger' : ''}`}\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        className=\"todo-item-favorite d-inline-block mr-1 mr-sm-0\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation()\r\n                          this.props.starTask(todo)\r\n                        }}\r\n                      >\r\n                        <Bookmark\r\n                          size={17}\r\n                          className={`${todo.isStarred ? 'text-warning' : ''}`}\r\n                        />\r\n                      </div>\r\n                      {routerFilter !== 'trashed' ? (\r\n                        <div\r\n                          className=\"todo-item-delete d-inline-block mr-1 mr-sm-0\"\r\n                          // onClick={(e) => {\r\n                          //   //e.stopPropagation()\r\n                          //   this.openModal(todo.id)\r\n                          // }}\r\n                        >\r\n                          <Trash\r\n                            size={17}\r\n                            onClick={(e) => {\r\n                              e.stopPropagation()\r\n                              this.setState({ id: todo.id, open: true })\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                  {todo.desc.length > 0 ? (\r\n                    <p\r\n                      className=\"todo-desc mb-0\"\r\n                      style={{ wordBreak: 'break-all', whiteSpace: 'normal' }}\r\n                    >\r\n                      {todo.desc}\r\n                    </p>\r\n                  ) : (\r\n                    ''\r\n                  )} */}\r\n                </CardBody>\r\n              </Card>\r\n            </li>\r\n          )\r\n        })\r\n      ) : (\r\n        <p className=\"p-1 text-center mt-2 font-medium-3 text-bold-500\">\r\n          No tasks at this time\r\n        </p>\r\n      )\r\n\r\n    return (\r\n      <div className=\"content-right h-100\">\r\n        <div className=\"todo-app-area h-100\">\r\n          <div className=\"todo-app-list-wrapper h-100\">\r\n            <div className=\"todo-app-list h-100\">\r\n              <div className=\"app-fixed-search\">\r\n                <div\r\n                  className=\"sidebar-toggle d-inline-block d-lg-none\"\r\n                  onClick={() => this.props.mainSidebar(true)}\r\n                >\r\n                  <Menu size={24} />\r\n                </div>\r\n                <FormGroup\r\n                  style={{\r\n                    display: 'flex',\r\n                    margin: 'auto',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                  className=\"position-relative has-icon-left\"\r\n                >\r\n                  <div style={{ borderRadius: '1.428rem' }}>\r\n                    <div className=\"form-control-position\">\r\n                      <Search size={15} />\r\n                    </div>\r\n                    <Input\r\n                      style={{\r\n                        width: '100%'\r\n                      }}\r\n                      type=\"text\"\r\n                      placeholder=\"Search...\"\r\n                      onChange={(e) => this.handleOnChange(e)}\r\n                      value={value}\r\n                    />\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n              <PerfectScrollbar\r\n                className=\"todo-task-list\"\r\n                options={{\r\n                  wheelPropagation: false\r\n                }}\r\n              >\r\n                <ul className=\"todo-task-list-wrapper\">{renderTodos}</ul>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    app: state.todoApp\r\n  }\r\n}\r\nexport default connect(mapStateToProps, {\r\n  getTodos,\r\n  completeTask,\r\n  starTask,\r\n  importantTask,\r\n  trashTask,\r\n  searchTask\r\n})(DiaryList)\r\n","import React from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  FormGroup,\r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { X, Bookmark, Star, Tag, Check } from 'react-feather'\r\nimport Checkbox from '../../components/@vuexy/checkbox/CheckboxesVuexy'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport VideoRecorder from 'react-video-recorder'\r\nimport { Recorder } from 'react-voice-recorder'\r\nimport 'react-voice-recorder/dist/index.css'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  starTask,\r\n  completeTask,\r\n  importantTask,\r\n  updateTask,\r\n  updateLabel,\r\n  addNewTask\r\n} from '../../redux/actions/diary/index'\r\nconst colourOptions1 = [\r\n  {\r\n    value: 'Attachment',\r\n    label: 'Attachment',\r\n    color: '#00B8D9',\r\n    isFixed: true\r\n  },\r\n  {\r\n    value: 'Scribble',\r\n    label: 'Scribble',\r\n    color: '#00B8D9',\r\n    isFixed: true\r\n  },\r\n  {\r\n    value: 'Text',\r\n    label: 'Text',\r\n    color: '#00B8D9',\r\n    isFixed: true\r\n  },\r\n  {\r\n    value: 'Video',\r\n    label: 'Video',\r\n    color: '#0052CC',\r\n    isFixed: true\r\n  },\r\n  {\r\n    value: 'Voice',\r\n    label: 'Voice',\r\n    color: '#0052CC',\r\n    isFixed: true\r\n  }\r\n]\r\nclass TaskSidebar extends React.Component {\r\n  state = {\r\n    audioDetails: {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0\r\n      }\r\n    },\r\n    ptype: '',\r\n    taskToUpdate: null,\r\n    taskTitle: '',\r\n    taskDesc: '',\r\n    taskStatus: false,\r\n    taskStarred: false,\r\n    taskImportant: false,\r\n    newTask: {\r\n      title: '',\r\n      desc: '',\r\n      tags: [],\r\n      isCompleted: false,\r\n      isImportant: false,\r\n      isStarred: false\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      (this.props.taskToUpdate !== null &&\r\n        this.state.taskToUpdate !== this.props.taskToUpdate) ||\r\n      (this.props.taskToUpdate !== null &&\r\n        this.state.taskStatus !== this.props.taskToUpdate.isCompleted) ||\r\n      (this.props.taskToUpdate !== null &&\r\n        this.state.taskStarred !== this.props.taskToUpdate.isStarred) ||\r\n      (this.props.taskToUpdate !== null &&\r\n        this.state.taskImportant !== this.props.taskToUpdate.isImportant)\r\n    ) {\r\n      this.setState({\r\n        taskToUpdate: this.props.taskToUpdate,\r\n        taskTitle: this.props.taskToUpdate.title,\r\n        taskDesc: this.props.taskToUpdate.desc,\r\n        taskStatus: this.props.taskToUpdate.isCompleted,\r\n        taskStarred: this.props.taskToUpdate.isStarred,\r\n        taskImportant: this.props.taskToUpdate.isImportant\r\n      })\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n  handleAudioStop = (data) => {\r\n    console.log(data)\r\n    this.setState({ audioDetails: data })\r\n  }\r\n  handleAudioUpload = (file) => {\r\n    console.log(file)\r\n  }\r\n  handleRest = () => {\r\n    const reset = {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0\r\n      }\r\n    }\r\n    this.setState({ audioDetails: reset })\r\n  }\r\n\r\n  handleNewTaskTags = (tag) => {\r\n    let tagsArr = this.state.newTask.tags\r\n    if (tagsArr.includes(tag)) {\r\n      tagsArr.splice(tagsArr.indexOf(tag), 1)\r\n    } else {\r\n      tagsArr.push(tag)\r\n    }\r\n    this.setState({\r\n      ...this.state.newTask,\r\n      tags: tag\r\n    })\r\n  }\r\n\r\n  renderTags = (taskArr) => {\r\n    return taskArr.map((tag, i) => (\r\n      <div className=\"chip mb-0 mr-50\" key={i}>\r\n        <div className=\"chip-body\">\r\n          <span className=\"chip-text\">\r\n            <span\r\n              className={`bullet bullet-${\r\n                tag === 'professional'\r\n                  ? 'warning'\r\n                  : tag === 'others'\r\n                  ? 'success'\r\n                  : tag === 'todo'\r\n                  ? 'danger'\r\n                  : 'primary'\r\n              } bullet-xs`}\r\n            />\r\n            <span className=\"text-capitalize ml-25\">{tag}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    ))\r\n  }\r\n\r\n  render() {\r\n    const { taskToUpdate, taskTitle, taskDesc, newTask, taskStatus } =\r\n      this.state\r\n\r\n    return (\r\n      <div\r\n        className={`task-sidebar ${\r\n          this.props.addTaskState === true ? 'show' : ''\r\n        }`}\r\n      >\r\n        <div className=\"task-header\">\r\n          <div className=\"d-flex justify-content-between\">\r\n            <div className=\"task-type-title text-bold-600\">\r\n              <h3 style={{ color: 'var(--warning)' }}>\r\n                {this.props.taskToUpdate && this.props.taskToUpdate.id\r\n                  ? 'Update Details'\r\n                  : 'Enter Details'}\r\n              </h3>\r\n            </div>\r\n            <div className=\"close-icon\">\r\n              <X\r\n                className=\"cursor-pointer\"\r\n                size={20}\r\n                onClick={() => {\r\n                  this.props.addTask('close')\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <PerfectScrollbar>\r\n          <div className=\"task-body\">\r\n            <div className=\"d-flex justify-content-between mb-2\">\r\n              <div className=\"mark-complete\">\r\n                {this.props.taskToUpdate && this.props.taskToUpdate.id && (\r\n                  <Checkbox\r\n                    color=\"primary\"\r\n                    className=\"user-checkbox\"\r\n                    icon={<Check className=\"vx-icon\" size={15} />}\r\n                    label={''}\r\n                    checked={taskStatus}\r\n                    onChange={(e) => {\r\n                      this.props.completeTask(this.props.taskToUpdate)\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"task-actions\">\r\n                <Star\r\n                  size={20}\r\n                  className={`mr-50 ${\r\n                    (this.props.taskToUpdate !== null &&\r\n                      this.state.taskImportant) ||\r\n                    newTask.isImportant\r\n                      ? 'text-success'\r\n                      : ''\r\n                  }`}\r\n                  onClick={() => {\r\n                    if (this.props.taskToUpdate !== null) {\r\n                      this.props.importantTask(this.props.taskToUpdate)\r\n                    } else {\r\n                      this.setState({\r\n                        newTask: {\r\n                          ...this.state.newTask,\r\n                          isImportant: !this.state.newTask.isImportant\r\n                        }\r\n                      })\r\n                    }\r\n                  }}\r\n                />\r\n                <Bookmark\r\n                  size={20}\r\n                  className={`mr-50 ${\r\n                    (this.props.taskToUpdate !== null &&\r\n                      this.state.taskStarred) ||\r\n                    newTask.isStarred\r\n                      ? 'text-warning'\r\n                      : ''\r\n                  }`}\r\n                  onClick={() => {\r\n                    if (this.props.taskToUpdate !== null) {\r\n                      this.props.starTask(this.props.taskToUpdate)\r\n                    } else {\r\n                      this.setState({\r\n                        newTask: {\r\n                          ...this.state.newTask,\r\n                          isStarred: !this.state.newTask.isStarred\r\n                        }\r\n                      })\r\n                    }\r\n                  }}\r\n                />\r\n                <UncontrolledDropdown className=\"d-inline-block\">\r\n                  <DropdownToggle tag=\"span\">\r\n                    <Tag className=\"mr-50\" size={20} />\r\n                  </DropdownToggle>\r\n                  <DropdownMenu tag=\"ul\" right>\r\n                    <DropdownItem tag=\"li\">\r\n                      <Checkbox\r\n                        color=\"primary\"\r\n                        className=\"user-checkbox\"\r\n                        icon={<Check className=\"vx-icon\" size={12} />}\r\n                        label={'Personal'}\r\n                        checked={\r\n                          (this.props.taskToUpdate !== null &&\r\n                            this.props.taskToUpdate.tags.includes(\r\n                              'personal'\r\n                            )) ||\r\n                          newTask.tags.includes('personal')\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        size=\"sm\"\r\n                        onChange={(e) => {\r\n                          e.stopPropagation()\r\n                          if (this.props.taskToUpdate !== null)\r\n                            this.props.updateLabel(taskToUpdate.id, 'personal')\r\n                          else this.handleNewTaskTags('personal')\r\n                        }}\r\n                      />\r\n                    </DropdownItem>\r\n                    <DropdownItem tag=\"li\">\r\n                      <Checkbox\r\n                        color=\"primary\"\r\n                        labelColor=\"#ff9f43\"\r\n                        className=\"user-checkbox\"\r\n                        icon={<Check className=\"vx-icon\" size={12} />}\r\n                        label={'Professional'}\r\n                        checked={\r\n                          (this.props.taskToUpdate !== null &&\r\n                            this.props.taskToUpdate.tags.includes(\r\n                              'professional'\r\n                            )) ||\r\n                          newTask.tags.includes('professional')\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        size=\"sm\"\r\n                        onClick={(e) => e.stopPropagation()}\r\n                        onChange={(e) => {\r\n                          e.stopPropagation()\r\n                          if (this.props.taskToUpdate !== null)\r\n                            this.props.updateLabel(\r\n                              taskToUpdate.id,\r\n                              'professional'\r\n                            )\r\n                          else this.handleNewTaskTags('professional')\r\n                        }}\r\n                      />\r\n                    </DropdownItem>\r\n                    <DropdownItem tag=\"li\">\r\n                      <Checkbox\r\n                        color=\"primary\"\r\n                        className=\"user-checkbox\"\r\n                        icon={<Check className=\"vx-icon\" size={12} />}\r\n                        label={'Others'}\r\n                        labelColor=\"#25af63\"\r\n                        checked={\r\n                          (this.props.taskToUpdate !== null &&\r\n                            this.props.taskToUpdate.tags.includes('others')) ||\r\n                          newTask.tags.includes('others')\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        size=\"sm\"\r\n                        onClick={(e) => e.stopPropagation()}\r\n                        onChange={(e) => {\r\n                          e.stopPropagation()\r\n                          if (this.props.taskToUpdate !== null)\r\n                            this.props.updateLabel(taskToUpdate.id, 'others')\r\n                          else this.handleNewTaskTags('others')\r\n                        }}\r\n                      />\r\n                    </DropdownItem>\r\n                    <DropdownItem tag=\"li\">\r\n                      <Checkbox\r\n                        color=\"primary\"\r\n                        className=\"user-checkbox\"\r\n                        labelColor=\"#ea5455\"\r\n                        icon={<Check className=\"vx-icon\" size={12} />}\r\n                        label={'TO DO List'}\r\n                        checked={\r\n                          (this.props.taskToUpdate !== null &&\r\n                            this.props.taskToUpdate.tags.includes('todo')) ||\r\n                          newTask.tags.includes('todo')\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        size=\"sm\"\r\n                        onClick={(e) => e.stopPropagation()}\r\n                        onChange={(e) => {\r\n                          e.stopPropagation()\r\n                          if (this.props.taskToUpdate !== null)\r\n                            this.props.updateLabel(taskToUpdate.id, 'todo')\r\n                          else this.handleNewTaskTags('todo')\r\n                        }}\r\n                      />\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </div>\r\n            </div>\r\n\r\n            <FormGroup className=\"form-label-group\">\r\n              <Select\r\n                className=\"React\"\r\n                classNamePrefix=\"select\"\r\n                // defaultValue={colourOptions1[0]}\r\n\r\n                ref={this.state.selectAssetRef}\r\n                name=\"color\"\r\n                options={colourOptions1}\r\n                isClearable={true}\r\n                placeholder=\"Select Message Type...\"\r\n                onChange={(e) => {\r\n                  this.setState({\r\n                    ptype: e ? e.value : ''\r\n                  })\r\n                }}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Input\r\n                type=\"text\"\r\n                placeholder=\"Title\"\r\n                value={\r\n                  this.props.taskToUpdate !== null ? taskTitle : newTask.title\r\n                }\r\n                onChange={(e) => {\r\n                  if (this.props.taskToUpdate !== null) {\r\n                    this.setState({\r\n                      taskTitle: e.target.value\r\n                    })\r\n                  } else {\r\n                    this.setState({\r\n                      newTask: {\r\n                        ...this.state.newTask,\r\n                        title: e.target.value\r\n                      }\r\n                    })\r\n                  }\r\n                }}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              {this.state.ptype === 'Video' && (\r\n                <VideoRecorder\r\n                  onRecordingComplete={(videoBlob) => {\r\n                    // Do something with the video...\r\n                    console.log('videoBlob', videoBlob)\r\n                  }}\r\n                />\r\n              )}\r\n              {this.state.ptype === 'Voice' && (\r\n                <Recorder\r\n                  record={true}\r\n                  title={'New recording'}\r\n                  audioURL={this.state.audioDetails.url}\r\n                  showUIAudio\r\n                  handleAudioStop={(data) => this.handleAudioStop(data)}\r\n                  handleAudioUpload={(data) => this.handleAudioUpload(data)}\r\n                  handleRest={() => this.handleRest()}\r\n                />\r\n              )}\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Input\r\n                type=\"textarea\"\r\n                placeholder=\"Description\"\r\n                rows=\"5\"\r\n                value={\r\n                  this.props.taskToUpdate !== null ? taskDesc : newTask.desc\r\n                }\r\n                onChange={(e) => {\r\n                  if (this.props.taskToUpdate !== null) {\r\n                    this.setState({\r\n                      taskDesc: e.target.value\r\n                    })\r\n                  } else {\r\n                    this.setState({\r\n                      newTask: {\r\n                        ...this.state.newTask,\r\n                        desc: e.target.value\r\n                      }\r\n                    })\r\n                  }\r\n                }}\r\n              />\r\n            </FormGroup>\r\n            <div className=\"chip-wrapper my-1 d-flex flex-wrap\">\r\n              {this.props.taskToUpdate !== null &&\r\n              this.props.taskToUpdate.tags &&\r\n              this.props.taskToUpdate.tags.length > 0\r\n                ? this.renderTags(this.props.taskToUpdate.tags)\r\n                : null}\r\n            </div>\r\n            <div\r\n              className=\"d-flex justify-content-end\"\r\n              style={{ textAlign: 'right' }}\r\n            >\r\n              <Button.Ripple\r\n                outline\r\n                className=\"mr-1 mb-1 button-label\"\r\n                color=\"secondary\"\r\n                onClick={() => {\r\n                  this.props.addTask('close')\r\n                  this.props.handleUndoChanges()\r\n                  this.setState({\r\n                    newTask: {\r\n                      title: '',\r\n                      desc: '',\r\n                      tags: [],\r\n                      isCompleted: false,\r\n                      isImportant: false,\r\n                      isStarred: false\r\n                    }\r\n                  })\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button.Ripple>{' '}\r\n              <Button.Ripple\r\n                className=\"mb-1 button-label\"\r\n                color=\"warning\"\r\n                onClick={() => {\r\n                  console.log('taskToUpdate', taskToUpdate)\r\n                  // toast.success('Note Added Successfully!!')\r\n\r\n                  if (this.props.taskToUpdate !== null) {\r\n                    const { isCompleted, isImportant, isStarred, tags } =\r\n                      taskToUpdate\r\n                    this.props.updateTask(\r\n                      taskToUpdate._id,\r\n                      taskTitle,\r\n                      taskDesc,\r\n                      taskToUpdate,\r\n                      isCompleted,\r\n                      isImportant,\r\n                      isStarred,\r\n                      tags\r\n                    )\r\n                  } else {\r\n                    this.props.addNewTask(this.state.newTask)\r\n                  }\r\n                  this.props.addTask('close')\r\n                  this.setState({\r\n                    newTask: {\r\n                      title: '',\r\n                      desc: '',\r\n                      tags: [],\r\n                      isCompleted: false,\r\n                      isImportant: false,\r\n                      isStarred: false\r\n                    }\r\n                  })\r\n                }}\r\n                disabled={\r\n                  taskTitle.length > 0 || newTask.title.length > 0\r\n                    ? false\r\n                    : true\r\n                }\r\n              >\r\n                {taskToUpdate &&\r\n                taskToUpdate.id &&\r\n                this.props.taskToUpdate !== null\r\n                  ? 'Update'\r\n                  : 'Add'}\r\n              </Button.Ripple>\r\n            </div>\r\n          </div>\r\n        </PerfectScrollbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    app: state.todoApp\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  completeTask,\r\n  importantTask,\r\n  starTask,\r\n  updateTask,\r\n  updateLabel,\r\n  addNewTask\r\n})(TaskSidebar)\r\n","import React, { useState } from 'react'\r\nimport Sidebar from 'react-sidebar'\r\nimport { ContextLayout } from '../../utility/context/Layout'\r\nimport DiarySidebar from './DiarySidebar'\r\nimport DiaryList from './DiaryList'\r\nimport TaskSidebar from './TaskSidebar'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport '../../assets/scss/plugins/extensions/toastr.scss'\r\nimport '../../assets/scss/pages/app-todo.scss'\r\nconst mql = window.matchMedia(`(min-width: 992px)`)\r\n\r\nconst Diary = (props) => {\r\n  const [addTask, setaddTask] = useState(false)\r\n  const [sidebarOpen, setsidebarOpen] = useState(false)\r\n  const [taskToUpdate, settaskToUpdate] = useState(null)\r\n  const [prevState, setprevState] = useState(null)\r\n\r\n  const onSetSidebarOpen = (open) => {\r\n    setsidebarOpen(open)\r\n  }\r\n\r\n  const handleAddTask = (status) => {\r\n    if (status === 'open') setaddTask(true)\r\n    else {\r\n      setaddTask(false)\r\n      settaskToUpdate(null)\r\n    }\r\n  }\r\n  const handleUpdateTask = (todo) => {\r\n    if (todo !== undefined) {\r\n      setaddTask(true)\r\n      settaskToUpdate(todo)\r\n    } else {\r\n      settaskToUpdate(null)\r\n    }\r\n  }\r\n\r\n  const handleUndoChanges = () => {\r\n    setprevState(true)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <h2 className=\"warning spacing nodisplay\">Secret Diary</h2>\r\n      <div className=\"todo-application position-relative\">\r\n        <div\r\n          className={`app-content-overlay ${\r\n            addTask || sidebarOpen ? 'show' : ''\r\n          }`}\r\n          onClick={() => {\r\n            handleAddTask('close')\r\n            onSetSidebarOpen(false)\r\n          }}\r\n        />\r\n        <ContextLayout.Consumer>\r\n          {(context) => (\r\n            <Sidebar\r\n              sidebar={\r\n                <DiarySidebar\r\n                  routerProps={props}\r\n                  addTask={handleAddTask}\r\n                  mainSidebar={onSetSidebarOpen}\r\n                />\r\n              }\r\n              docked={mql.matches}\r\n              open={sidebarOpen}\r\n              sidebarClassName=\"sidebar-content todo-sidebar d-flex\"\r\n              touch={false}\r\n              contentClassName=\"sidebar-children d-none\"\r\n              pullRight={context.state.direction === 'rtl'}\r\n            >\r\n              \"\"\r\n            </Sidebar>\r\n          )}\r\n        </ContextLayout.Consumer>\r\n        <DiaryList\r\n          routerProps={props}\r\n          handleUpdateTask={handleUpdateTask}\r\n          mainSidebar={onSetSidebarOpen}\r\n          prevState={prevState}\r\n          clearPrevState={() => {\r\n            setprevState(false)\r\n          }}\r\n        />\r\n        <TaskSidebar\r\n          addTask={handleAddTask}\r\n          addTaskState={addTask}\r\n          taskToUpdate={taskToUpdate}\r\n          mainSidebar={onSetSidebarOpen}\r\n          handleUndoChanges={handleUndoChanges}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Diary\r\n"],"sourceRoot":""}